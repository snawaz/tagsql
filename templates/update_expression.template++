

#pragma once

__BEGIN_HEADER__

#include <type_traits>
#include <string>
#include <memory>
#include <array>

#include <foam/strlib/format.h>
#include <foam/meta/seq.h++>
#include <__NAMESPACE__/table.h++>
#include <__NAMESPACE__/meta_table.h++>
#include <__NAMESPACE__/meta_column.h++>
#include <__NAMESPACE__/tags.h++>

#include <pqxx/pqxx>

__END_HEADER__

__BEGIN_NAMESPACE__

template<typename Table>
class update_expression
{
    public: 

	update_expression(std::shared_ptr<pqxx::connection> const & connection, std::string query)
	    : _connection(connection), _query(std::move(query)), _executed(false) {}

	auto where(condition clause) -> std::string
	{
	    _query += " WHERE " + clause._value;
	    return execute();
	}
	auto all() -> std::string
	{
	    return execute();
	}
    private:
	auto execute() -> std::string
	{
	    if ( _executed )
		return _query;
	    _executed = true;
	    pqxx::work transaction { *_connection } ;
	    auto result = transaction.exec(_query);
	    transaction.commit();
	    return _query;
	}
    private:
	std::shared_ptr<pqxx::connection>   _connection;
	std::string                       _query;
	bool                              _executed;
};

__END_NAMESPACE__
